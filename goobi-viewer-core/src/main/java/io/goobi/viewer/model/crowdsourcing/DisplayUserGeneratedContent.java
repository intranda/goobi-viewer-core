/*
 * This file is part of the Goobi viewer - a content presentation and management
 * application for digitized objects.
 *
 * Visit these websites for more information.
 *          - http://www.intranda.com
 *          - http://digiverso.com
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.goobi.viewer.model.crowdsourcing;

import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.solr.common.SolrDocument;
import org.json.JSONObject;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import de.intranda.api.annotation.IResource;
import de.intranda.api.annotation.ITypedResource;
import de.intranda.api.annotation.wa.SpecificResource;
import de.intranda.api.annotation.wa.TextualResource;
import de.intranda.api.annotation.wa.TypedResource;
import io.goobi.viewer.controller.DateTools;
import io.goobi.viewer.controller.HtmlParser;
import io.goobi.viewer.controller.StringConstants;
import io.goobi.viewer.controller.StringTools;
import io.goobi.viewer.exceptions.DAOException;
import io.goobi.viewer.exceptions.IndexUnreachableException;
import io.goobi.viewer.managedbeans.utils.BeanUtils;
import io.goobi.viewer.messages.ViewerResourceBundle;
import io.goobi.viewer.model.annotation.PersistentAnnotation;
import io.goobi.viewer.model.security.user.User;
import io.goobi.viewer.model.viewer.PageType;
import io.goobi.viewer.model.viewer.PhysicalElement;
import io.goobi.viewer.model.viewer.StructElement;
import io.goobi.viewer.solr.SolrConstants;
import io.goobi.viewer.solr.SolrTools;

/**
 * UserGeneratedContent stub class for displaying contents generated by the crowdsourcing module.
 */
public class DisplayUserGeneratedContent {

    public enum ContentType {

        PERSON,
        CORPORATION,
        ADDRESS,
        COMMENT,
        PICTURE,
        GEOLOCATION,
        NORMDATA,
        DATASET;

        public String getName() {
            return this.name();
        }

        public static ContentType getByName(String name) {
            if (StringUtils.isNotBlank(name)) {
                for (ContentType type : ContentType.values()) {
                    if (type.name().equalsIgnoreCase(name)) {
                        return type;
                    }
                }
            }
            return null;
        }
    }

    private static final Logger logger = LogManager.getLogger(DisplayUserGeneratedContent.class);
    /** Constant <code>format</code> */
    public static final NumberFormat FORMAT = new DecimalFormat("00000000");

    private Long id;

    private ContentType type;

    private String pi;

    private Integer page = null;

    private String label;

    private String extendendLabel = null;

    private String displayCoordinates;

    private String areaString;

    private ITypedResource annotationBody = new TypedResource();

    private User updatedBy;

    private LocalDateTime dateUpdated;

    private String accessCondition;

    private boolean crowdsourcingModuleContent;

    /**
     * Default constructor (needed for persistence).
     */
    public DisplayUserGeneratedContent() {
    }

    public DisplayUserGeneratedContent(PersistentAnnotation a) {
        this.id = a.getId();
        this.annotationBody = getAsResource(a.getBody());
        this.type = getTypeFromBody(this.annotationBody);
        this.accessCondition = a.getAccessCondition();
        this.areaString = getCoordinates(a.getTarget());
        this.dateUpdated = a.getDateModified() != null ? a.getDateModified() : a.getDateCreated();
        this.displayCoordinates = getCoordinates(a.getTarget());
        this.label = createLabelFromBody(this.type, this.annotationBody);
        this.extendendLabel = createExtendedLabelFromBody(this.type, this.annotationBody);
        this.page = a.getTargetPageOrder();
        this.pi = a.getTargetPI();
        this.crowdsourcingModuleContent = false;
        try {
            this.updatedBy = a.getCreator();
        } catch (DAOException e) {
            //ignore
        }

    }

    private static String getCoordinates(String target) {
        if (StringUtils.isNotBlank(target)) {
            ObjectMapper mapper = new ObjectMapper();
            try {
                IResource resource = mapper.readValue(target, SpecificResource.class);
                if (resource instanceof SpecificResource specificResource) {
                    return specificResource.getSelector().getValue();
                }
                return "";
            } catch (JsonProcessingException e) {
                return "";
            }
        }

        return "";
    }

    /**
     * <p>
     * Getter for the field <code>id</code>.
     * </p>
     *
     * @return a {@link java.lang.Long} object.
     */
    public Long getId() {
        return id;
    }

    /**
     * <p>
     * Setter for the field <code>id</code>.
     * </p>
     *
     * @param id a {@link java.lang.Long} object.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * <p>
     * Getter for the field <code>type</code>.
     * </p>
     *
     * @return the type
     */
    public ContentType getType() {
        return type;
    }

    /**
     * <p>
     * Setter for the field <code>type</code>.
     * </p>
     *
     * @param type the type to set
     */
    public void setType(ContentType type) {
        this.type = type;
    }

    /**
     * <p>
     * Getter for the field <code>pi</code>.
     * </p>
     *
     * @return the pi
     */
    public String getPi() {
        return pi;
    }

    /**
     * <p>
     * Setter for the field <code>pi</code>.
     * </p>
     *
     * @param pi the pi to set
     */
    public void setPi(String pi) {
        this.pi = pi;
    }

    /**
     * <p>
     * Getter for the field <code>page</code>.
     * </p>
     *
     * @return the page
     */
    public Integer getPage() {
        return page;
    }

    /**
     * <p>
     * Setter for the field <code>page</code>.
     * </p>
     *
     * @param page the page to set
     */
    public void setPage(Integer page) {
        this.page = page;
    }

    /**
     * <p>
     * Getter for the field <code>label</code>.
     * </p>
     *
     * @return the label
     */
    public String getLabel() {
        return label;
    }

    /**
     * <p>
     * Setter for the field <code>label</code>.
     * </p>
     *
     * @param label the label to set
     */
    public void setLabel(String label) {
        this.label = label;
    }

    /**
     * Returns the <code>label</code>, if set, otherwise <code>pi</code>.
     *
     * @return a {@link java.lang.String} object.
     */
    public String getDisplayLabel() {
        return StringUtils.isNotEmpty(label) ? label : pi;
    }

    /**
     * @return the extendendLabel
     */
    public String getExtendendLabel() {
        if (StringUtils.isNotBlank(this.extendendLabel)) {
            return extendendLabel;
        }
        return label;
    }

    /**
     * @param extendendLabel the extendendLabel to set
     */
    public void setExtendendLabel(String extendendLabel) {
        this.extendendLabel = extendendLabel;
    }

    /**
     * <p>
     * Getter for the field <code>updatedBy</code>.
     * </p>
     *
     * @return the updatedBy
     */
    public User getUpdatedBy() {
        return updatedBy;
    }

    /**
     * <p>
     * Setter for the field <code>updatedBy</code>.
     * </p>
     *
     * @param updatedBy the updatedBy to set
     */
    public void setUpdatedBy(User updatedBy) {
        this.updatedBy = updatedBy;
    }

    /**
     * <p>
     * Getter for the field <code>dateUpdated</code>.
     * </p>
     *
     * @return the dateUpdated
     */
    public LocalDateTime getDateUpdated() {
        return dateUpdated;
    }

    /**
     * <p>
     * getDateUpdatedAsString.
     * </p>
     *
     * @return a {@link java.lang.String} object.
     */
    public String getDateUpdatedAsString() {
        if (dateUpdated != null) {
            return DateTools.format(dateUpdated, DateTools.FORMATTERDEDATE, false);
        }
        return null;
    }

    /**
     * <p>
     * getTimeUpdatedAsString.
     * </p>
     *
     * @return a {@link java.lang.String} object.
     */
    public String getTimeUpdatedAsString() {
        if (dateUpdated != null) {
            return DateTools.format(dateUpdated, DateTools.FORMATTERISO8601TIME, false);
        }
        return null;
    }

    /**
     * <p>
     * Setter for the field <code>dateUpdated</code>.
     * </p>
     *
     * @param dateUpdated the dateUpdated to set
     */
    public void setDateUpdated(LocalDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
    }

    /**
     * @return the accessCondition
     */
    public String getAccessCondition() {
        return accessCondition;
    }

    /**
     * @param accessCondition the accessCondition to set
     */
    public void setAccessCondition(String accessCondition) {
        this.accessCondition = accessCondition;
    }

    /**
     * <p>
     * Getter for the field <code>areaString</code>.
     * </p>
     *
     * @return the areaString
     */
    public String getAreaString() {
        return areaString;
    }

    /**
     * <p>
     * Setter for the field <code>areaString</code>.
     * </p>
     *
     * @param areaString the areaString to set
     */
    public void setAreaString(String areaString) {
        this.areaString = areaString;
    }

    /**
     * <p>
     * hasArea.
     * </p>
     *
     * @return a boolean.
     */
    public boolean hasArea() {
        return getAreaString() != null && !getAreaString().isEmpty();
    }

    /**
     * <p>
     * mayHaveArea.
     * </p>
     *
     * @return a boolean.
     */
    public boolean mayHaveArea() {
        return true;
    }

    /**
     * <p>
     * convertToIntArray.
     * </p>
     *
     * @param coordinates int[]
     * @return int[]
     */
    public static int[] convertToIntArray(double[] coordinates) {
        int[] intCoords = new int[coordinates.length];
        for (int i = 0; i < coordinates.length; i++) {
            Double d = coordinates[i];
            intCoords[i] = (int) Math.round(d);
        }
        return intCoords;
    }

    /**
     * <p>
     * convertToDoubleArray.
     * </p>
     *
     * @param coordinates int[]
     * @return double[]
     */
    public static double[] convertToDoubleArray(int[] coordinates) {
        double[] doubleCoords = new double[coordinates.length];
        for (int i = 0; i < coordinates.length; i++) {
            Integer k = coordinates[i];
            doubleCoords[i] = k;
        }
        return doubleCoords;
    }

    /**
     * <p>
     * Getter for the field <code>displayCoordinates</code>.
     * </p>
     *
     * @return a {@link java.lang.String} object.
     */
    public String getDisplayCoordinates() {
        return displayCoordinates;
    }

    /**
     * <p>
     * Setter for the field <code>displayCoordinates</code>.
     * </p>
     *
     * @param displayCoordinates a {@link java.lang.String} object.
     */
    public void setDisplayCoordinates(String displayCoordinates) {
        this.displayCoordinates = displayCoordinates;
    }

    /* (non-Javadoc)
     * @see io.goobi.viewer.model.crowdsourcing.AbstractCrowdsourcingUpdate#getDisplayPage()
     */
    /**
     * Alias for {@link #getPage()}
     *
     * @return a {@link java.lang.Integer} object.
     */
    public Integer getDisplayPage() {
        return getPage();
    }

    public static class DateComparator implements Comparator<DisplayUserGeneratedContent> {

        /* (non-Javadoc)
         * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
         */
        @Override
        public int compare(DisplayUserGeneratedContent o1, DisplayUserGeneratedContent o2) {
            return o1.dateUpdated.compareTo(o2.dateUpdated);
        }
    }

    /**
     * Check if the resource has either a label or an annotation body with a type
     *
     * @return true if neither label nor annotation body exist
     */
    public boolean isEmpty() {
        return StringUtils.isEmpty(getLabel())
                && (this.annotationBody == null || StringUtils.isBlank(this.annotationBody.getType()));
    }

    /**
     * <p>
     * getTypeAsString.
     * </p>
     *
     * @return a {@link java.lang.String} object.
     */
    public String getTypeAsString() {
        return getType().getName();
    }

    /**
     * @return the annotationBody
     */
    public ITypedResource getAnnotationBody() {
        return annotationBody;
    }

    /**
     * @param annotationBody the annotationBody to set
     */
    public void setAnnotationBody(ITypedResource annotationBody) {
        this.annotationBody = annotationBody;
    }

    public boolean setAnnotationBody(String json) {
        this.annotationBody = getAsResource(json);
        return this.annotationBody != null;
    }

    private static ITypedResource getAsResource(Object value) {

        String json = createJsonFromFeatures(value);

        ObjectMapper mapper = new ObjectMapper();
        ITypedResource resource = null;
        if (StringUtils.isNotBlank(json) && !"{}".equals(json)) {
            try {
                resource = mapper.readValue(json, de.intranda.api.annotation.wa.TypedResource.class);
                if (resource == null) {
                    throw new IllegalArgumentException("no content generated");
                }
            } catch (JsonProcessingException | IllegalArgumentException | ClassCastException e) {
                try {
                    resource = mapper.readValue(json, de.intranda.api.annotation.oa.TypedResource.class);
                } catch (JsonProcessingException | ClassCastException e1) {
                    resource = new TextualResource(json,
                            HtmlParser.isHtml(json) ? StringConstants.MIMETYPE_TEXT_HTML : StringConstants.MIMETYPE_TEXT_PLAIN);
                }
            }
        }
        return resource;
    }

    public static String createJsonFromFeatures(Object value) {
        String json;
        if (value instanceof List) {
            @SuppressWarnings("unchecked")
            List<Object> features = (List<Object>) value;
            if (features.size() == 1) {
                json = SolrTools.getAsString(features.get(0));
            } else {
                json = "[" + features.stream().map(SolrTools::getAsString).collect(Collectors.joining(",")) + "]";
            }
        } else {
            json = SolrTools.getAsString(value);
        }
        return json;
    }

    /**
     * <p>
     * buildFromSolrDoc.
     * </p>
     *
     * @param doc a {@link org.apache.solr.common.SolrDocument} object.
     * @return UserGeneratedContent generated from the given Solr document
     * @should construct content correctly
     * @throws io.goobi.viewer.exceptions.IndexUnreachableException if any.
     */
    public static DisplayUserGeneratedContent buildFromSolrDoc(SolrDocument doc) throws IndexUnreachableException {
        if (doc == null) {
            throw new IllegalArgumentException("doc may not be null");
        }

        ITypedResource body = Optional.ofNullable(doc.getFieldValue(SolrConstants.MD_BODY))
                .map(DisplayUserGeneratedContent::getAsResource)
                .orElse(null);
        ContentType type = Optional.ofNullable(getTypeFromBody(body))
                .orElse(Optional.ofNullable(doc.getFieldValue(SolrConstants.UGCTYPE))
                        .map(SolrTools::getAsString)
                        .map(ContentType::getByName)
                        .orElse(null));

        if (type == null) {
            logger.error("Cannot build UGC Solr doc, UGCTYPE '{}' not found.", type);
            return null;
        }

        DisplayUserGeneratedContent ret = new DisplayUserGeneratedContent();
        long iddoc = Long.parseLong((String) doc.getFieldValue(SolrConstants.IDDOC));
        ret.setId(iddoc);
        ret.setType(type);
        ret.setAreaString((String) doc.getFieldValue(SolrConstants.UGCCOORDS));
        ret.setDisplayCoordinates((String) doc.getFieldValue(SolrConstants.UGCCOORDS));
        ret.setPi((String) doc.getFieldValue(SolrConstants.PI_TOPSTRUCT));
        ret.setAccessCondition(SolrTools.getSingleFieldStringValue(doc, SolrConstants.ACCESSCONDITION));
        ret.setCrowdsourcingModuleContent(!doc.containsKey(SolrConstants.MD_ANNOTATION_ID));
        if (body != null) {
            ret.setAnnotationBody(body);
        }
        Object pageNo = doc.getFieldValue(SolrConstants.ORDER);
        if (pageNo instanceof Number number) {
            ret.setPage(number.intValue());
        }
        if (StringUtils.isNotBlank(ret.getAnnotationBody().getType())) {
            ret.setLabel(createLabelFromBody(ret.getType(), ret.getAnnotationBody()));
            ret.setExtendendLabel(createExtendedLabelFromBody(ret.getType(), ret.getAnnotationBody()));
        } else {
            StructElement se = new StructElement(iddoc, doc);
            ret.setLabel(generateUgcLabel(se));
        }

        return ret;
    }

    /**
     * @param type
     * @param body
     * @return the text if the body is a TextualResource. Otherwise return null
     */
    private static String createExtendedLabelFromBody(ContentType type, ITypedResource body) {
        if (ContentType.COMMENT.equals(type) && body instanceof TextualResource text) {
            return text.getText();
        }

        return null;
    }

    /**
     * @param type
     * @param body
     * @return {@link String}
     */
    private static String createLabelFromBody(ContentType type, ITypedResource body) {
        if (type == null || body == null) {
            return "";
        }
        switch (type) {
            case GEOLOCATION:
                return "";
            case NORMDATA:
                return Paths.get(body.getId().getPath()).getFileName().toString();
            case DATASET:
                return getDataSetForDisplay(body);
            case COMMENT:
            default:
                if (body instanceof TextualResource text) {
                    return HtmlParser.getPlaintext(text.getText());
                }
                return "admin__crowdsourcing_question_type_" + type.toString();
        }
    }

    /**
     * @param body
     * @return {@link String}
     */
    private static String getDataSetForDisplay(ITypedResource body) {
        JSONObject json = new JSONObject(body.toString());
        JSONObject data = json.getJSONObject("data");
        StringBuilder sb = new StringBuilder();
        for (String key : data.keySet()) {
            String value = data.getJSONArray(key).getString(0);
            sb.append(ViewerResourceBundle.getTranslation(key, BeanUtils.getLocale()));
            sb.append(":\t");
            sb.append(value);
            sb.append("\n");
        }
        return sb.toString().trim();
    }

    /**
     * If the annotation body has a type property of one of "Feature", "AuthorityResource" or "TextualBody" then the {@link #type} is set accordingly.
     * 
     * @param body
     * @return {@link ContentType}
     */
    private static ContentType getTypeFromBody(ITypedResource body) {
        if (body != null && StringUtils.isNotBlank(body.getType())) {
            switch (body.getType()) {
                case "Feature":
                    return ContentType.GEOLOCATION;
                case "AuthorityResource":
                    return ContentType.NORMDATA;
                case "TextualBody":
                    return ContentType.COMMENT;
                case "Dataset":
                    return ContentType.DATASET;
                default:
                    return null;
            }
        }
        return null;
    }

    /**
     * Builds label out of user-generated content metadata.
     *
     * @param se a {@link io.goobi.viewer.model.viewer.StructElement} object.
     * @return the generated label
     * @should generate person label correctly
     * @should generate corporation label correctly
     * @should generate address label correctly
     * @should generate comment label correctly
     * @should return label field value if ugc type unknown
     * @should return text value for all types if no other fields exist
     */
    public static String generateUgcLabel(StructElement se) {
        if (se == null) {
            throw new IllegalArgumentException("se may not be null");
        }

        String text = StringTools.escapeHtmlChars(se.getMetadataValue("MD_TEXT"));
        if (se.getMetadataValue(SolrConstants.UGCTYPE) != null) {
            switch (se.getMetadataValue(SolrConstants.UGCTYPE)) {
                case "PERSON":
                    return generatePersonLabel(se);
                case "CORPORATION":
                    return generateCorporationLabel(se);
                case "ADDRESS":
                    return generateAddressLabel(se, text);
                case "COMMENT":
                    return text;
                default:
                    return se.getMetadataValue(SolrConstants.LABEL);
            }
        }

        return se.getMetadataValue(SolrConstants.LABEL);
    }

    /**
     * 
     * @param se
     * @param text
     * @return {@link String}
     */
    public static String generateAddressLabel(StructElement se, String text) {
        StringBuilder sb = new StringBuilder();

        appendIfNotEmpty(sb, se.getMetadataValue("MD_STREET"));
        if (sb.length() > 0) {
            appendIfNotEmpty(sb, se.getMetadataValue("MD_HOUSENUMBER"));
        }
        appendIfNotEmpty(sb, se.getMetadataValue("MD_DISTRICT"));
        appendIfNotEmpty(sb, se.getMetadataValue("MD_CITY"));
        appendIfNotEmpty(sb, se.getMetadataValue("MD_COUNTRY"));

        // Text fallback
        if (sb.length() == 0 && StringUtils.isNotEmpty(text)) {
            sb.append(text);
        }

        return sb.toString();
    }

    /**
     * 
     * @param sb
     * @param value
     */
    private static void appendIfNotEmpty(StringBuilder sb, String value) {
        if (StringUtils.isNotEmpty(value)) {
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(value);
        }
    }

    /**
     * 
     * @param se
     * @return {@link String}
     */
    public static String generateCorporationLabel(StructElement se) {
        StringBuilder sb = new StringBuilder();
        String address = se.getMetadataValue("MD_ADDRESS");
        String corp = se.getMetadataValue("MD_CORPORATION");
        if (StringUtils.isNotEmpty(corp)) {
            sb.append(corp);
        }
        if (StringUtils.isNotEmpty(address)) {
            sb.append(" (").append(corp).append(')');
        }
        return sb.toString();
    }

    public static String generatePersonLabel(StructElement se) {
        StringBuilder sb = new StringBuilder();
        String first = se.getMetadataValue("MD_FIRSTNAME");
        String last = se.getMetadataValue("MD_LASTNAME");
        if (StringUtils.isNotEmpty(last)) {
            sb.append(last);
        }
        if (StringUtils.isNotEmpty(first)) {
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(first);
        }
        return sb.toString();
    }

    public boolean isOnThisPage(PhysicalElement page) {
        return this.page != null && this.page.equals(page.getOrder());
    }

    public boolean isOnOtherPage(PhysicalElement page) {
        return isOnAnyPage() && !isOnThisPage(page);
    }

    public boolean isOnAnyPage() {
        return this.page != null;
    }

    public String getIconClass() {
        switch (this.type) {
            case ADDRESS:
                return "fa fa-envelope";
            case PERSON:
                return "fa fa-user";
            case CORPORATION:
                return "fa fa-home";
            case PICTURE:
                return "fa fa-photo";
            case GEOLOCATION:
                return "fa fa-map-marker";
            case NORMDATA:
                return "fa fa fa-list-ul";
            case COMMENT:
            default:
                return "fa fa-comment";
        }
    }

    public String getPageUrl() {
        return getPageUrl(BeanUtils.getNavigationHelper().getCurrentPageType());
    }

    /**
     * 
     * @param pageType
     * @return Generated URL
     */
    public String getPageUrl(PageType pageType) {

        String pageTypeUrl = BeanUtils.getNavigationHelper().getPageUrl(pageType); //no trailing slash
        String pageUrl = pageTypeUrl + "/" + getPi() + "/";
        if (getPage() != null) {
            pageUrl = pageUrl + getPage() + "/#ugc=" + getId();
        }
        return pageUrl;
    }

    public boolean isCrowdsourcingModuleContent() {
        return crowdsourcingModuleContent;
    }

    public void setCrowdsourcingModuleContent(boolean crowdsourcingModuleContent) {
        this.crowdsourcingModuleContent = crowdsourcingModuleContent;
    }

}

<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets" 
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:h="http://xmlns.jcp.org/jsf/html" 
    xmlns:f="http://xmlns.jcp.org/jsf/core" 
    xmlns:jsf="http://xmlns.jcp.org/jsf" 
    xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
    xmlns:o="http://omnifaces.org/ui"
    xmlns:viewer="http://xmlns.jcp.org/jsf/composite/components/partner" 
    xmlns:viewerComponent="http://xmlns.jcp.org/jsf/composite/components"
    xmlns:widgetComponent="http://xmlns.jcp.org/jsf/composite/components/widgets">

    <!-- IMAGE CONTAINER -->
    <div id="imageContainer" class="view-object__image #{activeDocumentBean.viewManager.showImageThumbnailGallery() and activeDocumentBean.viewManager.imagesCount ge 1 ? '-thumbnailPreviewGallery' : ''}">

		<!-- SHOW SCROLLING SIDEBAR IMAGE THUMBNAIL PREVIEW FOR INFINITE SCROLLING -->
		<ui:fragment rendered="#{activeDocumentBean.viewManager.showImageThumbnailGallery() and activeDocumentBean.viewManager.imagesCount ge 1}">

			<viewerComponent:sidebarScrollPreview range="300" imageSize="200" currentPageOrder="#{activeDocumentBean.viewManager.currentImageOrder}" />
		
		</ui:fragment>

        <!-- MAP -->
        <div id="imageMap" class="view-object__image-map" data-allow-download="#{activeDocumentBean.viewManager.currentPage.accessPermissionImageDownload}"></div>

        <!-- MOBILE IMAGE OVERLAY -->
        <div id="imageContainerMobileOverlay" class="view-object__image-mobile-overlay"></div>
    </div>
    
	<popover id="share-image-area-popup">

	<div class="share-image-area">
		<div class="share-image-area__instructions">#{msg.help__share_image_area__select}</div>

		<div class="share-image-area__links">
		<div>#{msg.help__share_image_area__share}</div> 
			<ul>
				<li>
					<a data-copy-done-msg="#{msg.copyUrlDone}"
						data-copy-share-image="image-region-page"
						title="#{msg.bookmarkList_shareLink_copy}">#{msg.label__share_image_region_page}</a>
				</li> 
				<li>
					<a data-copy-share-image="image-region-image"
						data-copy-done-msg="#{msg.copyUrlDone}"
						title="#{msg.bookmarkList_shareLink_copy}">#{msg.label__share_image_region_image}</a>
				</li>
			</ul>
		</div>

		<div class="share-image-area__controls">
			<button type="button" data-popover="close" class="btn btn--full">#{msg.closeWindow}</button>
		</div>
	</div>
	</popover> 
	
	<popover id="imageFilterPopover">
		<imageFilters/>
	</popover>

	<!-- OPEN SEADRAGON -->
    <script type="text/javascript" src="#{request.contextPath}/resources/javascript/libs/openseadragon/openseadragon.min.js"></script>
    <script type="text/javascript" src="#{request.contextPath}/resources/javascript/libs/openseadragon/openseadragon-viewerinputhook.js"></script>
    <script type="text/javascript" src="#{request.contextPath}/resources/javascript/dist/imageView.min.js"></script>
    <script type="text/javascript">
  		//<![CDATA[
  			
  			    
      	function getId(url) {
      	 	let lastIndex = url.lastIndexOf('?');
      	  	let id = lastIndex !== -1 ? url.slice(0, lastIndex) : url;
      	  
      	  	lastIndex = id.lastIndexOf('/info.json');
    	  	id = lastIndex !== -1 ? id.slice(0, lastIndex) : id;
    	  	
    	  	return id;
      	}
  			
  		const changeImageOrder = new rxjs.Subject();	//call next() to set image in canvas, pass image order as parameter
       	const imageOrderChanged = new rxjs.Subject();	//Called when image is changed from within the canvas. subscribe to get notified of changes. image order is passed as parameter
      		    
    	const imageElement = $( "#imageMap" );
        const access = #{activeDocumentBean.viewManager.currentPage.accessPermissionImage};
        const accessDeniedMessage = $( "<div />" ).addClass( "view-object__access-denied" ).html( '#{msg.noImage_accessDenied}' );
        const page = "#{navigationHelper.currentPage}";
        const allowZoom = #{activeDocumentBean.viewManager.currentPage.accessPermissionImageZoom};
        const imageOrderToUrlMap = new Map(Object.entries(#{activeDocumentBean.viewManager.imageInfosAsJson}).map(([key, value]) => [Number(key), value]));
        const imageIdToOrderMap = new Map(Object.entries(#{activeDocumentBean.viewManager.imageInfosAsJson}).map(([key, value]) => [getId(value), Number(key)]));
        const currentImageOrder = #{activeDocumentBean.viewManager.currentImageOrder}
        console.log("images ", imageMap);
        var configViewer = {
        	global: {
        		divId: "imageMap",
        		viewMode: "#{activeDocumentBean.viewManager.pageNavigation.name().toLowerCase()}",
        		bottomMargin: () => #{activeDocumentBean.viewManager.currentPage.getFooterHeight(navigationHelper.currentPage)},
        		adaptContainerHeight: true,
        		persistZoom: #{configurationBean.rememberImageZoom},
        		persistRotation: #{configurationBean.rememberImageRotation},
        		persistenceId: "#{activeDocumentBean.topDocumentIddoc}" + "_" + "#{navigationHelper.currentPage}",
        		maxZoomLevel: 5,
        		zoomSpeed: allowZoom ? 1.25 : 1,
        		zoomSlider: allowZoom ? '.zoom-slider' : '',
        		navigator: {
        			show: #{configurationBean.showImageNavigator(navigationHelper.currentPage, activeDocumentBean.viewManager.currentPage.mimeType)}
        		},
        		controls : {
        		    rotateLeft: '.rotate-left',
        		    rotateRight: '.rotate-right',
        		    reset: '.reset',
        		},
        		sequence : {
        			nextImageOffset: 100
        		},
        		overlayGroups: [ {
                    name: "searchHighlighting",
                    styleClass: "coords-highlighting",
                    interactive: false
                }, {
                    name: "ugc",
                    styleClass: "ugcBox",
                    interactive: true,
                
                },
                {
                    name: "annotations",
                    styleClass: "image-fragment",
                    interactive: true
                
                }],
        	},
        	image: {
        		mimeType: "#{activeDocumentBean.viewManager.currentPage.displayMimeType}",
	       		tileSource : Array.from(imageOrderToUrlMap.values()),
	       		currentImageId : getId(imageOrderToUrlMap.get(currentImageOrder)),
        		baseFooterUrl : "#{activeDocumentBean.viewManager.getWatermarkUrl(navigationHelper.currentPage)}",
        		highlightCoords: [
        			{
        				name: "searchHighlighting",
        				coordinates: #{activeDocumentBean.viewManager.currentSearchResultCoords},
        				displayTooltip: false,
        				pageIndex : #{activeDocumentBean.viewManager.currentPageSourceIndex},
        			},
		            {
		                name: "ugc",
		                coordinates: (function(coords){
		                    	return coords ? coords: [];
		                	})(#{contentBean.getCurrentUGCCoords(activeDocumentBean.viewManager.currentPage)}),
		                displayTooltip: #{configurationBean.displayAnnotationTextInImage}
		            }, {
		                name: "annotations",
		                coordinates: window.location.hash,
		                displayTooltip: false
		            }
        		]
        	}
        };
        
        var imageFilterConfig = {
	        filters : {
	            brightness: {
	                label: "#{msg.label__image_filter_brightness}"
	            },
	            contrast: {
	                label: "#{msg.label__image_filter_contrast}"
	            },
	            saturate: {
	                label: "#{msg.label__image_filter_saturate}"
	            },
	            grayscale: {
	                label: "#{msg.label__image_filter_grayscale}"
	            },
	            threshold: {
	                label: "#{msg.label__image_filter_bitonal}"
	            },
	            blur: {
	                label: "#{msg.label__image_filter_blur}",
	                visible: false
	            },
	            sharpen: {
	                label: "#{msg.label__image_filter_sharpen}"
	            },
	            invert: {
	                label: "#{msg.label__image_filter_invert}"
	            },
	            hue: {
	                label: "#{msg.label__image_filter_rotate}"
	            }
	        },
	        messages: {
	            clearAll: "#{msg.action__reset_all_image_filters}"
	        }
        };
        
        var pageAreaConfig = {
                areas : #{activeDocumentBean.viewManager.currentPage.containedStructElementsAsJson},
                currentLogId : "#{activeDocumentBean.logid}"
        }
        
        // check for fullscreen and change container height 
        if ( configViewer && $( '#fullscreen' ).length > 0 ) {
        	configViewer.global.adaptContainerHeight = false;
        	configViewer.global.topMargin = () => {
        	    var $header = $('#fullscreenHeader');
        	    if($header.is(":visible")) {
        	        return $header.height();
        	    } else {
        	        return 0;
        	    }
        	}
        	configViewer.global.rightMargin = () => {
        	    var $sidebar = $('#fullscreenViewSidebar');
        	    if(parseInt($sidebar.css("right")) < 0) {
        	        return 0;
        	    } else {
        	        return $sidebar.width();
        	    }
        	}
        }
       	// desktop object view
       	if ( access && configViewer) {
           	var viewImage = new ImageView.Image( configViewer )
           	
           	viewImage.load().then( function( image ) {
           		initializeSequence();
           	    $(".openseadragon-canvas").get(0).focus = () => {
           	       //prevent focus on os-div to avoid scrolling down on click
           	    }
           		let shareImageFragment = new viewerJS.ShareImageFragment(image);
           		shareImageFragment.initImageFragmentLinks();
           	} ).catch( function( error ) {
           		console.error( "viewObject.xhtml - viewImage.init: Error opening image", error );
           		if(imageElement.lenth > 0) {           		    
           			imageElement.get(0).innerHTML = viewerJS.helper.renderAlert( "alert-danger", "#{msg.noImage_fileNotFound}: " + error, false );
           		}
           		
           		// reload image footer in fullscreen
           		if ( page === "fullscreen" ) {
                	$( window ).on( "resize orientationchange", function() {
                		viewImage.loadFooter();                    		
                	} );
                }
           	} );
        } 
       	else {
       		imageElement.append( accessDeniedMessage );
       	}

       	// mobile overlay
       	if ( window.matchMedia( '(max-width: 768px)' ).matches && page !== 'fullscreen' ) {
       		$( "#imageContainerMobileOverlay" ).show();
       	}
       	       	
		if(viewImage) {	
			
			if(viewImage.config.global.navigator.show) {				
	       	 	viewImage.observables.viewerOpen.subscribe(() => {
	       	 		let size = viewImage.getImageInfo().map(source => [source.tileSource.width, source.tileSource.height])[0];
	       	 		let adaptionThresholds = #{activeDocumentBean.viewManager.currentPage.imageHeightRationThresholds};
	       	 		//console.log("adapt image height ", size, adaptionThresholds);
	       	 		if(size && size.length > 0 && adaptionThresholds && adaptionThresholds.length > 1) {
		       	 		let sizeRatio = size[1]/size[0]; // height/width
		       	 		if(sizeRatio < adaptionThresholds[0] || sizeRatio > adaptionThresholds[1]) {
			       	 		viewImage.config.global.adaptContainerHeight = false;		       	 			
		       	 		}
	       	 		}
	       	 		viewImage.viewer.navigator.element.style.marginBottom = (configViewer.global.bottomMargin()-5) + "px";
	       	 	});
			}
		    
		    //init image filter tools
       	 	viewImage.observables.viewportUpdate.pipe(RxOp.first()).subscribe( () => {
       	 	    let originClean = viewImage.isOriginClean();
       	 	    if(originClean) {
       	 	        $(".image-controls__option.image-filter button").prop('disabled', false);
       	 	    	$(".image-controls__option.image-filter button i").tooltip("disable");
       	 	        $(".image-controls__option.image-filter button")
       	 	        .attr('title', "#{msg.label__image_filter_toolkit}")
       	 	        .tooltip('_fixTitle');
       	 	        
					riot.mount("imageFilters", {
					    image: viewImage,
					    config: imageFilterConfig
				    });
       	 	    }
       	 	});
	
		    function initializeSequence() {
	           	if(viewImage.sequence) {
	           		
	           		//ajax updates
	           		viewImage.sequence.onScroll
	           		.pipe(
	           			rxjs.operators.withLatestFrom(viewImage.sequence.onCurrentImageChange),
	           			rxjs.operators.map(e => e[1]),
	           			rxjs.operators.distinctUntilChanged(),
	           			rxjs.operators.debounceTime(800)		
	           		)
	           		.subscribe(imageId => setCurrentImageOrder({"order": imageIdToOrderMap.get(imageId)}));

	           		//js updates
		           	viewImage.sequence.onCurrentImageChange
		           	.pipe(rxjs.operators.debounceTime(300))
		           	.subscribe (imageId => {
		           		const pageNo = imageIdToOrderMap.get(imageId);
		           		console.log("image changed to " + pageNo, imageId);
		           		if(pageNo != undefined) {	           			
			           		setBrowserLocation(pageNo);
			           		imageOrderChanged.next(pageNo);
		           		}
		           		//update dropdown selector
		           		//document.querySelector(".custom-control.custom-control--select select").value = pageNo;
		           	});
	           		
		           	changeImageOrder.subscribe(pageNo => {	    
		           		console.log("set image to " + pageNo, imageOrderToUrlMap.get(Number(pageNo)));
		           		if(pageNo != undefined ) {
		            		viewImage.sequence.setCurrentImage(getId(imageOrderToUrlMap.get(Number(pageNo))), true)
		           		}
		           	})
	             }
		    }
       	 	
		    //init page areas
       	 	function drawPageAreas(config, imageView) {
				let styles = viewerJS.helper.getCss("page-area", ['borderTopColor', 'borderTopWidth', 'background-color']);
				let style = {
				        borderWidth: styles["borderTopWidth"],
				        borderColor: styles["borderTopColor"],
				        fillColor: styles["background-color"]
				}
				let activeStyles = viewerJS.helper.getCss("page-area focus", ['borderTopColor', 'borderTopWidth', 'background-color']);
				let activeStyle = {
				        borderWidth: parseInt(activeStyles["borderTopWidth"]),
				        borderColor: activeStyles["borderTopColor"],
				        fillColor: activeStyles["background-color"]
				}
				
        	    imageView.viewer.addHandler("canvas-press", () => {
        	        imageView.dragging = false;
        	    })
        	    imageView.viewer.addHandler("canvas-drag", () => {
        	        imageView.dragging = true;
        	    })
				
				let activeAreas = config.areas.filter(a => a.logId === config.currentLogId);
				// console.log("active areas: ", activeAreas);
				if(activeAreas.length > 0) {
					drawActiveAreas(activeAreas, imageView);
					initAreaClick(imageView, activeAreas);
				} else {
					let inactiveAreas = config.areas.filter(a => a.logId !== config.currentLogId);
				    let inactiveLogIds = inactiveAreas.map(a => a.logId).filter((v, i, a) => a.indexOf(v) === i); //last filter to make logIds unique
				    inactiveLogIds.forEach(logId => {
				        let logIdAreas = config.areas.filter(a => a.logId === logId);
				        logIdAreas.forEach( (area, index) => drawArea(area, index, imageView));				    
				    })
				    initAreaClick(imageView, inactiveAreas);				    
				}

		    }
		    function setBrowserLocation(pageNo) {
		    	const url = new URL(window.location.href);
           		let pathArray = url.pathname.split("/");
           		let replacedPathPart = false;
           		for (var i = pathArray.length-1; i >= 0; i--) {
					if(/^\d+$/.test(pathArray[i])) {
						//this is presumably the page number
						pathArray[i] = pageNo;
						replacedPathPart = true;
						break;
					}
				}
           		if(!replacedPathPart) {
           			if(pathArray[pathArray.length-1].length == 0) {
           				pathArray.pop();
           			}
           			pathArray.push(pageNo)
           		}
           		url.pathname = pathArray.join("/");
           		
           		//update tab url
           	 	//alternatively use history.addState to add an entry to the browser history, so navigating back leads to the previous page
           		window.history.replaceState(null, "", url.toString());
		    }
		    
		    function drawActiveAreas(activeAreas, imageView) {
		    	let areasOnCanvas = [];
				activeAreas.forEach((activeArea, index) => {				        
				    let rect = ImageView.CoordinateConversion.convertToOpenSeadragonObject(activeArea.coords);
		            rect = ImageView.CoordinateConversion.scaleToOpenSeadragon(rect, imageView.viewer, imageView.getOriginalImageSize());
		            areasOnCanvas.push(rect);
				    drawArea(activeArea, index, imageView);
	        	    let scrollPosition = window.sessionStorage.getItem("scrollPosition");
	        	    $(document).scrollTop(parseInt(scrollPosition));
	        	    window.sessionStorage.removeItem("scrollPosition");
			    })
	            let shadow = new ImageView.Tools.Filter.HighlightArea(imageView, 0.5, areasOnCanvas, true);
				shadow.start();
		    }
		    function initAreaClick(imageView, areas) {
	        	if(areas.length > 0) {
	        	    let $area = $(".page-area.active");
	        	    let url = areas[0].url.replace("/" + areas[0].logId, "");
	        	    $(imageView.viewer.canvas).css("cursor", "pointer");
	        	     imageView.viewer.addHandler("canvas-release", () => {
	        	        if(!imageView.dragging) {		        	            
		        	        let $target = $(event.target);
		        	        if($target.filter($area).length == 0) {
			        	    	window.location.href = url;
		        	        }
	        	        }
	        	    })
	        	    areas.forEach((area) => {
		        	    let $area = $(".page-area:not(.active)[id^=pageAreaFrame_"+area.logId+"_]");
			        	$area.on("click", () => {
			        	    if(!imageView.dragging) {		        	        
				        	    window.sessionStorage.setItem("scrollPosition", $(document).scrollTop());
				        	    window.location.href = area.url;
			        	    }
			        	});
			        });
	        	}
		    }
		    function drawArea(area, shapeIndex, imageView, clickToLeave) {
		        let rect = ImageView.CoordinateConversion.convertToOpenSeadragonObject(area.coords);
	            rect = ImageView.CoordinateConversion.scaleToOpenSeadragon(rect, imageView.viewer, imageView.getOriginalImageSize());
	        	let $area = $("#pageAreaFrame_" + area.logId + "_" + shapeIndex);
	        	let $label = $("#pageAreaLabel_" + area.logId + "_" + shapeIndex);
	            let overlay = new ImageView.Overlay({
	                rect: rect,
	                viewer: imageView.viewer,
	                rotateWithImage: true,
	                element: $area.get(0),
	                label: $label.get(0)
	            });
	        	overlay.draw();

	        	$area.hover(
	        		() => $label.addClass("hover"),
	        		() => $label.removeClass("hover")
	        	);

		    }
		    
		    
		    viewImage.observables.viewportUpdate.pipe(RxOp.first()).subscribe( () => {
       	 	    let originClean = viewImage.isOriginClean();
       	 	    if(originClean) {
       	    		drawPageAreas(pageAreaConfig, viewImage);
       	 	    }
       			highlightUGC();
       			enableGeoMapHighlighting();
		    })
		    
		} else {
		   //image not reachable or access denied
		}
		
		function enableGeoMapHighlighting() {
			let mapFeatureMap = new Map();
			viewImage.overlays?.getOverlays().forEach(imageArea => {
				let id = imageArea.id;
				let mapMarker = viewerJS.GeoMap.maps.get('widget_geoMap_').layers.flatMap(l => l.markers)
				.find(marker => marker.feature?.properties?.documentId == id);
				//highlight image overlay on hover over map marker with same annotation id
				if(mapMarker) {
					mapMarker.on("mouseover", e => imageArea.element.focus(true));
					mapMarker.on("mouseout", e => imageArea.element.focus(false));
					mapFeatureMap.set(imageArea, mapMarker);
				}
			});
			//highlight map marker when hovering over image overlay with same annotation id
			viewImage.overlays?.onFocus((overlay, focus) => {
				let marker = mapFeatureMap.get(overlay);
				if(focus) {
					marker?.feature?.layer?.highlightMarker(marker);					
				} else {
					marker?.feature?.layer?.highlightMarker();
				}
			})
		}
		
		// Focus UGC
		function highlightUGC() {		    
			var hash = window.location.hash;
			if(hash && hash.startsWith("#ugc=")) {
			    let ugcId = hash.substring(5);
			    if($('#viewObject').length) {			        
			    	$("html, body").scrollTop($('#viewObject').offset().top - 40);
			    }
			    if(viewImage && viewImage.overlays) {
			        let widgetTitle = $("#widgetAnnotations").find(".widget__title.collapseable");
			        if(widgetTitle.length > 0 && !widgetTitle.hasClass("in")) {			            
			            widgetTitle.toggleClass('in').next().slideToggle('fast');
			        }
			        $("#words-" + ugcId).addClass("ugc-highlight");
			        viewImage.overlays.focusBox("ugc", ugcId);
			    }
			}
		}
		
        

        
		       	
      	//]]>
  		
    </script>
    

    
    <ui:repeat var="se" value="#{activeDocumentBean.viewManager.currentPage.containedStructElements}">
    	<ui:fragment rendered="#{se.hasShapeMetadata()}">
    	<ui:repeat var="shape" value="#{se.getShapeMetadataForPage(activeDocumentBean.viewManager.currentPage.order)}" varStatus="status">
	    	<div id="pageAreaFrame_#{se.logid}_#{status.index}" class="page-area #{se.logid == activeDocumentBean.logid ? 'active':''}">
	    	</div>
	    	<div id="pageAreaLabel_#{se.logid}_#{status.index}" class="page-area-label #{se.logid == activeDocumentBean.logid ? 'active':''}">
			    <svg viewBox="0 0 100 100">
					  <foreignObject width="100%" height="100%">
					  <div class="page-area-label-text"
					  	title="#{se.label}">
						#{se.label}
					  </div>
					  </foreignObject>
				</svg> 
	    	</div>
    	</ui:repeat>
    	</ui:fragment>
	</ui:repeat>

</ui:composition>
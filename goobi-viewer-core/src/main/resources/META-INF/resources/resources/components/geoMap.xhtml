<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:composite="http://xmlns.jcp.org/jsf/composite"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html">

    <composite:interface>
        <composite:attribute name="geoMap" required="true" type="io.goobi.viewer.model.maps.GeoMap" />
    	<composite:attribute name="mapId" required="false" default="geomap" />
    	<composite:attribute name="linkTarget" required="false" default="_self" />
    	<composite:attribute name="linkToSearch" required="false" default="true" />
    	<composite:attribute name="linkTarget" required="false" default="_self" />
    	<composite:attribute name="popoverOnHover" type="java.lang.Boolean" required="false" default="#{true}"/>
    	<composite:attribute name="clusterMarkers" type="java.lang.Boolean" required="false" default="#{true}"/>
    	<composite:attribute name="popoverClass" required="false" default="geomap_popover"/>
    	<composite:attribute name="highlightDocumentId" required="false" default=""/>
    	<composite:attribute name="currentPageNo" type="java.lang.Integer" required="false" default="#{null}"/>
    	<composite:attribute name="featureSetSwitch" type="java.lang.Boolean" required="false" default="false"/>
    	<composite:attribute name="featureFilters" required="false" default="#{configurationBean.geomapFiltersAsJson}"/>
    	<composite:attribute name="showFeatureList" type="java.lang.Boolean" required="false" default="#{false}"/>
    </composite:interface>
    
	<composite:implementation>
		<div id="#{cc.attrs.mapId}" class="geomap"> 
			<span class="ajax_loader">
				<img src="#{request.contextPath}/resources/images/infinity_loader.gif" class="img-responsive" alt="Waiting..." />
			</span>
			<div id="featureList_#{cc.attrs.mapId}" class="geomap__featurelist"></div>
		</div>
		<popover id="popoverTemplate_#{cc.attrs.mapId}" class="#{cc.attrs.popoverClass}">
				<h3 data-metadata="title"></h3>
				<span data-metadata="description"></span>
		</popover>
		<div class="geomap__options_wrapper">
			<div id="featureSetSelector_#{cc.attrs.mapId}" class="geomap__featureset_selector"/>
			<div id="featureFilters_#{cc.attrs.mapId}" class="geomap__featureFilters"></div>
		</div>
		<script>
		
		$(document).ready(() => { 
		    let config = {
		    		documentIdToHighlight: "#{cc.attrs.highlightDocumentId}",
		    		pagesToShow:  "[#{cc.attrs.currentPageNo}]",
		            map: {
			            mapId : "#{cc.attrs.mapId}",
			            language: "#{navigationHelper.localeString}",
			            iconPath: "#{request.contextPath}/resources/images/map",
			            layers: [
			            <ui:repeat value="#{cc.attrs.geoMap.featureSets}" var="featureSet">
				            {
				            	features: #{featureSet.featuresAsString},
				                allowMovingFeatures: false,
				           		popover: #{cc.attrs.geoMap.showPopover} ? "#popoverTemplate_#{cc.attrs.mapId}" : undefined,
				           		popoverOnHover: #{cc.attrs.popoverOnHover},
				           		clusterMarkers: #{cc.attrs.clusterMarkers},
				           		markerIcon: (icon => icon)(#{featureSet.markerAsJSON}),
				           		label: #{featureSet.name.getAsJson()},
				           		controls: {
				           			zoom: {
				           				in: "#geomap_#{cc.attrs.mapId}_zoomIn",
				           				out: "#geoMap_#{cc.attrs.mapId}_ZoomOut",
				           				step: 1
				           			}
				           		},
				           		search: {
					            	searchUrlTemplate : '#{featureSet.queryResultSet ? geoMapBean.getCoordinateSearchQueryTemplate(featureSet) : ""}',			           			
					            	openSearchOnMarkerClick: #{featureSet.queryResultSet},
					            	linkTarget : "#{cc.attrs.linkTarget}",
					            	loader: "##{cc.attrs.mapId} .ajax_loader",
				           		},
				           		<ui:fragment rendered="#{featureSet.queryResultSet}">
					            heatmap: {
					            	enabled: #{featureSet.queryResultSet and configurationBean.useHeatmapForCMSMaps()},
					            	heatmapUrl: "#{geoMapBean.heatmapUrl}",
					            	featureUrl: "#{geoMapBean.featureUrl}",
					        	    filterQuery: "#{featureSet.solrQueryEncoded}",
					        	    labelField: "#{featureSet.markerTitleField}",
					            }, 
					            </ui:fragment>
					            style : {
					            	stroke: true,
					            	color: '#{featureSet.color}',
					            	opactity: 0.9,
					            	fill: true,
					            	fillColor: '#{featureSet.color}',
					            	fillOpacity: #{featureSet.fillOpacity},
					            	radius: 15
					            }
				            },
			           		</ui:repeat>
				        ],
		            },
		    }
		    // console.log("map layers ", config.map.layers.map(l => l.features));
	    	let geomap = new viewerJS.GeoMapCms(config);
			window.geomap = geomap;
		    let view = #{cc.attrs.geoMap.initialView};
	    	geomap.init(view)
	    	.then((map) => {
	    		if(#{cc.attrs.showFeatureList}) {	 
		    		riot.mount(document.getElementById("featureList_#{cc.attrs.mapId}"), "geojsonfeaturelist", {
		    			featureGroups: map.layers,
		    			geomap: map,
		    			entityLinkFormat: ["#{request.contextPath}/object/\${PI}/"],
		    			locale: "#{navigationHelper.locale}",	    			  
		    			defaultLocale: "#{navigationHelper.defaultLocale}"
		    		})
	    		}
	    		if(#{cc.attrs.featureSetSwitch}) {	 
		    		map.setActiveLayers(map.layers.slice(0, 1));
		    		riot.mount(document.getElementById("featureSetSelector_#{cc.attrs.mapId}"), "featuresetselector", {
		    			featureGroups: map.layers,
		    			geomap: map,
		    			locale: "#{navigationHelper.locale}",
		    			defaultLocale: "#{navigationHelper.defaultLocale}"
		    		})
	    		}
	    		if(#{not empty cc.attrs.featureFilters}) {	    			
		    		riot.mount(document.getElementById("featureFilters_#{cc.attrs.mapId}"), "featuresetfilter", {
		    			filters: new Map(Object.entries(#{cc.attrs.featureFilters})),
	    				geomap: map,
	    				featureGroups: map.getActiveLayers(),
		    			locale: "#{navigationHelper.locale}",
		    			defaultLocale: "#{navigationHelper.defaultLocale}",
		    			msg: {
		    				"alle" : "#{msg.all}"
		    			}
		    		})
	    		}
	    	})
	    	.catch(e => {
	    		console.error("Error initializing map ", e);
	    	})
    	})    

		</script>
	</composite:implementation>
</ui:composition>